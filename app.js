
class TonCasinoApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.userData = null;
        this.demoMode = false;
        this.init();
    }

    async init() {
        this.tg.expand();
        this.tg.ready();
        
        await this.loadUserData();
        this.setupEventListeners();
        this.loadTransactionHistory();
        this.updateDemoModeUI();
    }

    async loadUserData() {
        try {
            const response = await fetch(`/api/user/${this.tg.initDataUnsafe.user.id}`);
            this.userData = await response.json();
            this.demoMode = this.userData.demo_mode;
            this.updateUI();
        } catch (error) {
            console.error('Error loading user data:', error);
        }
    }

    async loadTransactionHistory() {
        try {
            const response = await fetch(`/api/transactions/${this.tg.initDataUnsafe.user.id}`);
            const data = await response.json();
            this.updateTransactionHistory(data.transactions);
        } catch (error) {
            console.error('Error loading transactions:', error);
        }
    }

    updateTransactionHistory(transactions) {
        const transactionsContainer = document.getElementById('transactions');
        if (transactionsContainer) {
            transactionsContainer.innerHTML = '';
            
            transactions.forEach(transaction => {
                const transactionElement = document.createElement('div');
                transactionElement.className = 'transaction-item';
                
                const amountClass = transaction.type === 'deposit' ? 'transaction-positive' : 'transaction-negative';
                const sign = transaction.type === 'deposit' ? '+' : '-';
                const demoBadge = transaction.demo ? ' (TESTNET)' : '';
                
                transactionElement.innerHTML = `
                    <div class="transaction-info">
                        <div>${transaction.type.toUpperCase()}${demoBadge}</div>
                        <div class="transaction-date">${new Date(transaction.created_at).toLocaleDateString()}</div>
                    </div>
                    <div class="transaction-amount ${amountClass}">
                        ${sign}${transaction.amount} TON
                    </div>
                `;
                
                transactionsContainer.appendChild(transactionElement);
            });

            if (transactions.length === 0) {
                transactionsContainer.innerHTML = '<div class="no-transactions">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
            }
        }
    }

    updateUI() {
        if (this.userData) {
            const balanceElement = document.getElementById('balance');
            const demoBadgeElement = document.getElementById('demo-badge');
            const networkInfoElement = document.getElementById('network-info');
            const depositModeInfo = document.getElementById('deposit-mode-info');
            const withdrawModeInfo = document.getElementById('withdraw-mode-info');
            
            if (balanceElement) {
                balanceElement.textContent = this.userData.balance.toFixed(2);
            }
            
            if (demoBadgeElement) {
                demoBadgeElement.style.display = this.demoMode ? 'block' : 'none';
            }
            
            if (networkInfoElement) {
                networkInfoElement.textContent = this.demoMode ? 
                    'üîß TESTNET MODE - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ TON' : 
                    'üåê MAINNET MODE - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ TON';
            }
            
            if (depositModeInfo) {
                depositModeInfo.textContent = this.demoMode ? 
                    '–î–µ–º–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–µ—Å—Ç–æ–≤—ã–µ TON)' : 
                    '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Pay';
            }
            
            if (withdrawModeInfo) {
                withdrawModeInfo.textContent = this.demoMode ? 
                    '–î–µ–º–æ-–≤—ã–≤–æ–¥ (—Ç–µ—Å—Ç–æ–≤—ã–µ TON)' : 
                    '–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Pay';
            }
        }
    }

    updateDemoModeUI() {
        const demoToggle = document.getElementById('demo-toggle');
        const demoStatus = document.getElementById('demo-status');
        
        if (demoToggle && demoStatus) {
            // –î–ª—è Render –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            demoToggle.disabled = true;
            demoToggle.checked = this.demoMode;
            demoStatus.textContent = this.demoMode ? 'TESTNET' : 'MAINNET';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            if (this.demoMode) {
                demoStatus.title = "–†–µ–∂–∏–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ";
            }
        }
    }

    async toggleDemoMode() {
        // –î–ª—è Render –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.tg.showPopup({
            title: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            message: "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            buttons: [{ type: "ok" }]
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        const demoToggle = document.getElementById('demo-toggle');
        demoToggle.checked = this.demoMode;
    }

    async processDeposit() {
        const amount = parseFloat(document.getElementById('deposit-amount').value);
        
        if (!amount || amount < 1) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: 1 TON');
            return;
        }

        try {
            const response = await fetch('/api/create-deposit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    amount: amount
                })
            });

            const result = await response.json();
            
            if (result.success) {
                if (result.demo) {
                    // –î–µ–º–æ-—Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –∑–∞—á–∏—Å–ª—è–µ–º
                    this.tg.showPopup({
                        title: "‚úÖ –î–µ–º–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        message: `–î–µ–º–æ-–¥–µ–ø–æ–∑–∏—Ç ${amount} TON —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!`,
                        buttons: [{ type: "ok" }]
                    });
                    
                    await this.loadUserData();
                    await this.loadTransactionHistory();
                } else {
                    // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    window.open(result.invoiceUrl, '_blank');
                    
                    this.tg.showPopup({
                        title: "–û–ø–ª–∞—Ç–∞ TON",
                        message: `–û—Ç–∫—Ä–æ–π—Ç–µ Crypto Bot –¥–ª—è –æ–ø–ª–∞—Ç—ã ${amount} TON`,
                        buttons: [{ type: "ok" }]
                    });
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
                    this.checkDepositStatus(result.invoiceId);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                closeDepositModal();
            }
        } catch (error) {
            console.error('Deposit error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
        }
    }

    async checkDepositStatus(invoiceId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        const checkInterval = setInterval(async () => {
            try {
                const response = await fetch(`/api/invoice-status/${invoiceId}`);
                const result = await response.json();
                
                if (result.status === 'paid') {
                    clearInterval(checkInterval);
                    alert('–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!');
                    await this.loadUserData();
                    await this.loadTransactionHistory();
                } else if (result.status === 'expired' || result.status === 'cancelled') {
                    clearInterval(checkInterval);
                    alert('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω');
                }
            } catch (error) {
                console.error('Status check error:', error);
            }
        }, 5000);
    }

    async processWithdraw() {
        const amount = parseFloat(document.getElementById('withdraw-amount').value);
        const address = document.getElementById('withdraw-address').value;

        if (!amount || amount < 1 || !address) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 1 TON');
            return;
        }

        if (!address.startsWith('UQ') || address.length < 48) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TON –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å UQ...)');
            return;
        }

        try {
            const response = await fetch('/api/withdraw', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId: this.tg.initDataUnsafe.user.id,
                    amount: amount,
                    address: address
                })
            });

            const result = await response.json();
            
            if (result.success) {
                const title = result.demo ? "‚úÖ –î–µ–º–æ-–≤—ã–≤–æ–¥" : "‚úÖ –í—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω";
                const message = result.demo ? 
                    `–î–µ–º–æ-–≤—ã–≤–æ–¥ ${amount} TON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω` :
                    `–í—ã–≤–æ–¥ ${amount} TON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`;
                
                this.tg.showPopup({
                    title: title,
                    message: message,
                    buttons: [{ type: "ok" }]
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é
                await this.loadUserData();
                await this.loadTransactionHistory();
                
                closeWithdrawModal();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤');
            }
        } catch (error) {
            console.error('Withdraw error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    }

    setupEventListeners() {
        window.processDeposit = () => this.processDeposit();
        window.processWithdraw = () => this.processWithdraw();
        window.toggleDemoMode = () => this.toggleDemoMode();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new TonCasinoApp();
});